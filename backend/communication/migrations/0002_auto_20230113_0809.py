# Generated by Django 3.1 on 2023-01-13 08:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('communication', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='inboundsms',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='issuecategory',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='issuetype',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='outboundsms',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='smserror',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.CreateModel(
            name='CommunicationSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('enable_email', models.BooleanField(default=True, help_text='If checked, the system will enable sending of emails using the specified SMTP protocols')),
                ('email_host', models.CharField(help_text='Email server host', max_length=255)),
                ('email_from_name', models.CharField(help_text='Sender Name', max_length=255, null=True, verbose_name='Sender Name')),
                ('email_from_address', models.CharField(help_text='Sender Email Address', max_length=255, null=True, verbose_name='Sender Address')),
                ('email_host_user', models.CharField(help_text='Email server user', max_length=255)),
                ('email_host_password', models.CharField(help_text='Email server password', max_length=255)),
                ('email_host_protocol', models.CharField(blank=True, choices=[('TLS', 'TLS'), ('SSL', 'SSL')], default='TLS', help_text='Email protocol', max_length=20)),
                ('email_host_port', models.IntegerField(help_text='Email server port')),
                ('enable_push_notifications', models.BooleanField(default=True, help_text='If checked, the system will enable sending of push notifications')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='communication_communicationsettings_creator', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='communication_communicationsettings_updater', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'General Settings',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommunicationLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('posting_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date when record was created')),
                ('channel_type', models.TextField(choices=[('EMAIL', 'EMAIL'), ('SMS', 'SMS'), ('Push Notification', 'Push Notification')], help_text='Type of communication', max_length=255, verbose_name='channel_type')),
                ('recipient', models.CharField(help_text='Recipient', max_length=1000, verbose_name='recipient')),
                ('recipient_details', models.TextField(help_text='Details of the recipient', verbose_name='recipient_details')),
                ('message', models.TextField(help_text='Message', verbose_name='message')),
                ('message_type', models.CharField(help_text='Type of message', max_length=255)),
                ('sent_status', models.CharField(choices=[('Sent', 'Sent'), ('Pending', 'Pending'), ('Failed', 'Failed')], default='Pending', help_text='Sent status', max_length=50)),
                ('is_sent', models.BooleanField(blank=True, default=False, help_text='Has the message been sent ?', null=True)),
                ('sent_date', models.DateTimeField(blank=True, help_text='Date when it was sent', null=True)),
                ('method', models.CharField(blank=True, help_text='Triggering method', max_length=255, null=True)),
                ('arguments', models.TextField(blank=True, help_text='Request arguments when attempting to send', null=True)),
                ('request', models.TextField(blank=True, help_text='Http request', null=True)),
                ('response_text', models.TextField(blank=True, help_text='Response message from carrier network. Applies to SMS', null=True)),
                ('response_code', models.IntegerField(blank=True, help_text='Response status codes from carrier network. Applies to SMS', null=True)),
                ('response_message_id', models.CharField(blank=True, help_text='ID assigned to an SMS by the carrier network. Applies to SMS', max_length=255, null=True)),
                ('is_delivered', models.BooleanField(blank=True, help_text='Has the SMS been delivered. Applies to SMS', null=True)),
                ('delivery_response_text', models.TextField(blank=True, help_text='Delivery status response message from carrier network. Applies to SMS', null=True)),
                ('delivery_status', models.TextField(blank=True, help_text='Delivery status of the message. Applies to SMS', null=True)),
                ('delivery_date', models.DateTimeField(blank=True, help_text='Date/Time when SMS was delivered. Applies to SMS', null=True)),
                ('reference_doctype', models.CharField(blank=True, help_text='Type of record associated with this SMS. Applies to SMS', max_length=255, null=True)),
                ('reference_docname', models.IntegerField(blank=True, help_text='ID of record associated with this SMS. Applies to SMS', null=True)),
                ('sms_units', models.IntegerField(blank=True, help_text='SMS units utilized to send this SMS. Applies to SMS', null=True)),
                ('sms_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost to send SMS. Applies to SMS', max_digits=20, null=True)),
                ('error_date', models.DateTimeField(blank=True, help_text='Date when error occurred', null=True)),
                ('error_type', models.CharField(help_text='Type of error encountered when sending', max_length=255, null=True)),
                ('error_description', models.TextField(help_text='Error description when sending', null=True)),
                ('error_arguments', models.TextField(blank=True, help_text='Request arguments when error occured', null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='communication_communicationlog_creator', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='communication_communicationlog_updater', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
