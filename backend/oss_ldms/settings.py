"""
Django settings for oss_ldms project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""
import os
from pathlib import Path
from corsheaders.defaults import default_headers

from glob import glob

from datetime import timedelta
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration 
from dotenv import load_dotenv


os.environ['GDAL_DATA'] = '/home/kambia/anaconda3/envs/misland-africa/lib/python3.7/site-packages/rasterio/gdal_data'
# Load environment variables from .env file
load_dotenv("../.env")

if os.environ.get("SENTRY_ENABLED", '0') == '1':
    print('App monitoring enabled via :', os.environ.get('SENTRY_DSN', ''))
    sentry_sdk.init(
        dsn=os.environ.get('SENTRY_DSN', ''),
        integrations=[DjangoIntegration(
            transaction_style='url',
        )],

        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production,
        traces_sample_rate=1.0,

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,

        # By default the SDK will try to use the SENTRY_RELEASE
        # environment variable, or infer a git commit
        # SHA as release, however you may want to set
        # something more human-readable.
        # release="myapp@1.0.0",
    )
# os.environ.setdefault("DJANGO_SETTINGS_MODULE", __file__)
# os.environ.setdefault("DJANGO_SETTINGS_MODULE", "oss_ldms.settings")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/


SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=1))

# ALLOWED_HOSTS = ["*"]# ["0.0.0.0", "127.0.0.1", ".ngrok.io", "172.105.246.124"]

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "testserver 0.0.0.0 localhost 127.0.0.1 [::1]").split(" ")

# Application definition

INSTALLED_APPS = [   
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'corsheaders',
    'rest_framework',
    'rest_framework_gis',
    'common',
    'common_gis',
    'communication',
    'user',
    'leaflet',
    'django_filters',
    #'raster',
    'django_rq',
    'ldms',   
    'fcm_django'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'oss_ldms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'oss_ldms.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

# environ = os.getenv("ENV_TYPE", "DEV")
environ =  os.environ.get("ENV_TYPE", "DEV")
DATABASES = {
        'default': {
            # 'ENGINE': 'django.db.backends.sqlite3',
            # 'NAME': BASE_DIR / 'db.sqlite3',
            'ENGINE': os.environ.get("DB_ENGINE", "django.contrib.gis.db.backends.postgis"),
            'NAME': os.environ.get("POSTGRES_DBNAME"), # os.path.join(BASE_DIR, 'db.sqlite3')),
            'USER': os.environ.get("POSTGRES_USER"),
            'PASSWORD': os.environ.get("POSTGRES_PASS"),
            'HOST': os.environ.get("POSTGRES_HOST", "localhost"),
            'PORT': os.environ.get("POSTGRES_PORT"),
        }
    }

#print('Database object :', DATABASES)

# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
MEDIA_URL = "/media/"

CORS_ORIGIN_ALLOW_ALL = True
# we whitelist localhost:3000 or 3001 because that's where frontend will be served
# CORS_ORIGIN_WHITELIST = [
#         'http://localhost:3001',
#         'https://localhost:3001',
#     ]

# Enable asynchronous raster data parsing by django-raster
RASTER_USE_CELERY = False 

# Setup GDAL and GEOS gis library values to take care of Alpine docker image
# GDAL_LIBRARY_PATH=glob('/usr/lib/libgdal.so.*')[0]
# GEOS_LIBRARY_PATH=glob('/usr/lib/libgeos_c.so.*')[0]

# allow upload big file
# DATA_UPLOAD_MAX_MEMORY_SIZE = 20971520 #20MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 1024 * 50  # 50GB
FILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE

DEFAULT_NODATA = 255
MIN_INT = -9223372036854775807
MAX_INT = 9223372036854775807 

AUTH_USER_MODEL = 'user.CustomUser'
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
        ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.IsAdminUser',
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',41.227.30.136
        'user.backends.JWTAuthentication',
        # for browsable api view usage
        # 'rest_framework.authentication.SessionAuthentication', 
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema', #generate API Docs
}

# Jwt Authentication
# https://github.com/jpadilla/django-rest-framework-jwt/blob/master/rest_framework_jwt/settings.py
JWT_AUTH = {
  'JWT_ENCODE_HANDLER': 'rest_framework_jwt.utils.jwt_encode_handler',
  'JWT_DECODE_HANDLER': 'rest_framework_jwt.utils.jwt_decode_handler',
  'JWT_PAYLOAD_HANDLER': 'rest_framework_jwt.utils.jwt_payload_handler',
  'JWT_PAYLOAD_GET_USER_ID_HANDLER': 'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',
  'JWT_RESPONSE_PAYLOAD_HANDLER': 'rest_framework_jwt.utils.jwt_response_payload_handler',
 
#   'JWT_SECRET_KEY': 'SECRET_KEY',
#   'JWT_GET_USER_SECRET_KEY': None,
#   'JWT_PUBLIC_KEY': None,
#   'JWT_PRIVATE_KEY': None,
#   'JWT_ALGORITHM': 'HS256',
#   'JWT_VERIFY': True,
#   'JWT_VERIFY_EXPIRATION': True,
#   'JWT_LEEWAY': 0,
   'JWT_EXPIRATION_DELTA': timedelta(days=30),
#   'JWT_AUDIENCE': None,
#   'JWT_ISSUER': None,
   'JWT_ALLOW_REFRESH': False,
   'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=30),
#   'JWT_AUTH_HEADER_PREFIX': 'Bearer',
#   'JWT_AUTH_COOKIE': None,
}

# ENABLE_EMAIL_ACTIVATION = False
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
MAILER_EMAIL_BACKEND = EMAIL_BACKEND 
EMAIL_HOST_USER = 'stevenyaga@gmail.com'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_ACTIVATE_SUBJECT = "Confirm your account"
EMAIL_ACTIVATE_ACCOUNT_TEMPLATE = 'activate_account.html'
EMAIL_PAGE_DOMAIN = "http://35.224.7.89/"

# for caching
# https://www.imagescape.com/blog/2018/12/21/django-rq-setup-guide/
# https://github.com/rq/django-rq
# http://peter-hoffmann.com/2012/python-simple-queue-redis-queue.html

# CACHES = {
#     'default': {
#         'BACKEND': 'redis_cache.cache.RedisCache',
#         'LOCATION': 'localhost:6379:1',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#             'MAX_ENTRIES': 5000,
#         }
#     }
# }
CACHES = {
    'default':{
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'ldms_cache', # table to store cache, run python manage.py createcachetable
    }
}

JOB_TIMEOUT = os.getenv('QUEUED_JOB_TIMEOUT', 10800) #3 hours
RQ_QUEUES = {
    # 'default': {
    #     'USE_REDIS_CACHE': 'default'
    # }
    'default': {
        'HOST': os.getenv('REDIS_HOST'),
        'PORT': 6379,
        'DB': 0, #first database
        # 'PASSWORD': 'ldms123',
        'DEFAULT_TIMEOUT': JOB_TIMEOUT
    },
    # 'high': {
    #     'URL': os.getenv('REDISTOGO_URL', 'redis://localhost') if environ != "DEV" else "redis://localhost",
    #     'DEFAULT_TIMEOUT': JOB_TIMEOUT
    # },
    'low': {
        'HOST': os.getenv('REDIS_HOST'),
        'PORT': 6379, 
        'DB': 0,
        # 'PASSWORD': 'ldms123',
        'DEFAULT_TIMEOUT': JOB_TIMEOUT
    },
    'high': {
        'HOST': os.getenv('REDIS_HOST'),
        'PORT': 6379,
        'DB': 0, #first database
        # 'PASSWORD': 'ldms123',
        'DEFAULT_TIMEOUT': JOB_TIMEOUT
    },
    'extra_high': {
        'HOST': os.getenv('REDIS_HOST'),
        'PORT': 6379,
        'DB': 0, #first database
        # 'PASSWORD': 'ldms123',
        'DEFAULT_TIMEOUT': JOB_TIMEOUT
    },
}

RQ_EXCEPTION_HANDLERS = [
    'common.queue.job_exception_handler'
]
# Add a logger for rq_scheduler in order to display when jobs are queueud
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(asctime)s %(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },

    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'rq_scheduler': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

RQ_SHOW_ADMIN_LINK = True #show django-rq link in admin 
# Geoserver
GEOSERVER_HOST_PRIVATE = os.getenv('GEOSERVER_HOST_PRIVATE', 'http://0.0.0.0')
GEOSERVER_HOST_PUBLIC = os.getenv('GEOSERVER_HOST_PUBLIC', 'http://localhost')
GEOSERVER_IGNORE_PRIVATE_HOST = os.getenv('GEOSERVER_IGNORE_PRIVATE_HOST', 0)#
GEOSERVER_PORT = os.getenv('GEOSERVER_PORT')
GEOSERVER_USERNAME = os.getenv('GEOSERVER_ADMIN_USER')
GEOSERVER_PASSWORD = os.getenv('GEOSERVER_ADMIN_PASSWORD')


""" RQ_SHOW_ADMIN_LINK = True #show django-rq link in admin 

# Geoserver
GEOSERVER_HOST_PRIVATE = os.getenv('GEOSERVER_HOST_PRIVATE', 'http://0.0.0.0')
GEOSERVER_HOST_PUBLIC = os.getenv('GEOSERVER_HOST_PUBLIC', 'http://0.0.0.0')
GEOSERVER_IGNORE_PRIVATE_HOST = os.getenv('GEOSERVER_IGNORE_PRIVATE_HOST', 0)#
GEOSERVER_PORT = '8080'
GEOSERVER_USERNAME = "admin"
GEOSERVER_PASSWORD = "geoserver" """

# memory profiler
MEMORY_PROFILER_LOG_FILE = os.environ.get('MEMORY_PROFILER_LOG_FILE')
USE_MEMORY_PROFILER_LOG_FILE = int(os.getenv('USE_LOG_FILE', 1))

# nodata placeholder key in sld file
NODATA_PLACEHOLDER = "{NODATA}"

#1=Reproject then clip, 2=Clip then reproject. Option 2 is faster
REPROJECTION_METHOD=2

# for itm in RasterCategoryEnum:
# 	RASTER_CATEGORIES.append((itm.value, itm.value))
RASTER_CATEGORIES = sorted([
    ('', ''),
    ('NDVI', 'NDVI'),
    ('LULC', 'LULC'),
    ('SOC', 'SOC'),
    ('Rainfall', 'Rainfall'),
    ('Aspect', 'Aspect'),
    ('Forest Loss', 'Forest Loss'),
    ('SAVI', 'SAVI'),
    ('MSAVI', 'MSAVI'),
    ('Evapotranspiration', 'Evapotranspiration'),
    ('Ecological Units', 'Ecological Units'),
    ('Soil Slope', 'Soil Slope'),
    ('Soil Group', 'Soil Group'),
    ('Soil Drainage', 'Soil Drainage'),
    ('Soil Parent Material', 'Soil Parent Material'),
    ('Soil Texture', 'Soil Texture'),
    ('Soil Rock Fragments', 'Soil Rock Fragments'),
    ('Population Density', 'Population Density'),
    ('Land Use Density', 'Land Use Density'),
    ('Fire Risk', 'Fire Risk'),
    ('Erosion Protection', 'Erosion Protection'),
    ('Drought Resistance', 'Drought Resistance'),
    ('Plant Cover', 'Plant Cover'),
    ('Aridity Index', 'Aridity Index'),
    ('Tree Cover Loss', 'Tree Cover Loss'),
    ('Forest Activity Map', 'Forest Activity Map'),
    ('Vegetation Cover', 'Vegetation Cover'),
    ('Soil Roughness', 'Soil Roughness'),
    ('Soil Crust', 'Soil Crust'),
    ('Erodible Fraction', 'Erodible Fraction'),
    ('Climatic Erosivity', 'Climatic Erosivity'),
    ('Rainfall Erosivity', 'Rainfall Erosivity'),
    ('Soil Erodibility', 'Soil Erodibility'),
    ('Slope Steepness', 'Slope Steepness'),
    ('Cover Management', 'Cover Management'),
    ('Conservation Practices', 'Conservation Practices'),
    ('Geomorphology', 'Geomorphology'),
    ('Coastal Slope', 'Coastal Slope'),
    ('Sea Level Change', 'Sea Level Change'),
    ('Shoreline Erosion/Accretion', 'Shoreline Erosion/Accretion'),
    ('Tide Range', 'Tide Range'),
    ('Wave Height', 'Wave Height'),

])
# for itm in RasterSourceEnum:
# 	RASTER_SOURCES.append((itm.value, itm.value))

RASTER_SOURCES = sorted([
    ('', ''),
    ("LULC", "LULC"),
	("Modis", "Modis"),
	("Landsat 7", "Landsat 7"),
	("Landsat 8", "Landsat 8"),
	("Hansen", "Hansen"),
	("Sentinel 2", "Sentinel 2")
])

COMPUTATIONS = sorted([
    ("LULC", "LULC"),
	("LULC Change", "LULC Change"),
	("Forest Change", "Forest Change"),
	("Forest Fire", "Forest Fire"),
	("Forest Fire Risk", "Forest Fire Risk"),
	("SOC", "SOC"),
	("Productivity State", "Productivity State"),
	("Productivity Trajectory", "Productivity Trajectory"),
	("Productivity Performance", "Productivity Performance"),
	("Productivity", "Productivity"),
	("Land Degradation", "Land Degradation"),
	("Aridity Index", "Aridity Index"),
	("Climate Quality Index", "Climate Quality Index"),
	("Soil Quality Index", "Soil Quality Index"),
	("Vegetation Quality Index", "Vegetation Quality Index"),
	("Management Quality Index", "Management Quality Index"),
	("ESAI", "ESAI"),
	("Forest Carbon Emission", "Forest Carbon Emission"),
	("ILSWE", "ILSWE"),
	("RUSLE", "RUSLE"),
	("Coastal Vulnerability Index", "Coastal Vulnerability Index"),
])

COMPUTATION_ENUM_MAPPING = sorted([
    ("LCEnum", "LULC"),
	("LULCChangeEnum", "LULC Change"),
    ("ForestChangeEnum", "Forest Change"),
	("ForestChangeTernaryEnum", "Forest Change"),
    ("ForestChangeQuinaryEnum", "Forest Change"),
	("ForestFireEnum", "Forest Fire"),
	("FireRiskEnum", "Forest Fire Risk"),
	("SOCChangeEnum", "SOC"),
	("StateChangeBinaryEnum", "Productivity State"),
    ("StateChangeTernaryEnum", "Productivity State"),
    ("StateChangeQuinaryEnum", "Productivity State"),
	("TrajectoryChangeBinaryEnum", "Productivity Trajectory"),
    ("TrajectoryChangeTernaryEnum", "Productivity Trajectory"),
    ("TrajectoryChangeQuinaryEnum", "Productivity Trajectory"),    
	("PerformanceChangeBinaryEnum", "Productivity Performance"),
	("ProductivityEnum", "Productivity"),
    ("ProductivityChangeBinaryEnum", "Productivity"),
    ("ProductivityChangeTernaryEnum", "Productivity"),
	("LandDegradationBinaryChangeEnum", "Land Degradation"),
    ("LandDegradationTernaryChangeEnum", "Land Degradation"),
	("AridityIndexEnum", "Aridity Index"),
	("ClimateQualityIndexEnum", "Climate Quality Index"),
	("SoilQualityIndexEnum", "Soil Quality Index"),
	("VegetationQualityIndexEnum", "Vegetation Quality Index"),
	("ManagementQualityIndexEnum", "Management Quality Index"),
	("ESAIEnum", "ESAI"),
	("ForestCarbonEmissionEnum", "Forest Carbon Emission"),
	("ILSWEEnum", "ILSWE"),
	("RUSLEEnum", "RUSLE"),
	("CVIEnum", "Coastal Vulnerability Index"),
])

# for itm in SUPPORTED_COMPUTATIONS: # RasterSourceEnum:
#  	COMPUTATIONS.append((itm.value, itm.value))
# ] 

# Location of json file for return_url_map json file
RETURN_URL_MAP_PATH = os.getenv('RETURN_URL_MAP_FILE')

# Settings for GEE integration
GEE = {
    'SERVICE_ACCOUNT': os.getenv('GOOGLE_SERVICE_ACCOUNT'), # Google service account
    'PRIVATE_KEY_FILE': os.getenv('GOOGLE_PRIVATE_KEY_FILE'), # Google private key file
}

# Firebase integration
FIREBASE = {
    'CREDENTIALS_FILE': os.getenv("FIREBASE_APPLICATION_CREDENTIALS"),
}

# Push notification settings
# See https://pushalert.co/blog/how-to-get-gcm-api-key-project-number/#:~:text=GCM%20API%20Key&text=Then%20click%20on%20Dashboard%2C%20followed,tab%20available%20in%20left%20sidebar.

PUSH_NOTIFICATIONS_SETTINGS = {
    "FCM_API_KEY": os.getenv("FCM_API_KEY"),
    "GCM_API_KEY": os.getenv("GCM_API_KEY"),
    "APNS_CERTIFICATE": os.getenv("APNS_CERTIFICATE"),
    # "APNS_TOPIC": "com.example.push_test",
    # "WNS_PACKAGE_SECURITY_ID": ["your pack"],
    # "WNS_SECRET_KEY": "app secret key",
    # "WP_PRIVATE_KEY": "/path/to/private.pem",
    # "WP_CLAIMS": {"sub": "mailto: development@example.com"}
}

ENABLE_PUSH_NOTIFICATIONS = int(os.getenv("ENABLE_PUSH_NOTIFICATIONS", 1))# Should we enable push notifications
FCM_DJANGO_SETTINGS = {    
    #"APP_VERBOSE_NAME": "[string for AppConfig's verbose_name]",# default: _('FCM Django')
    "ONE_DEVICE_PER_USER": False, # true if you want to have only one active device per registered user at a time. default: False
    "DELETE_INACTIVE_DEVICES": True,  # devices to which notifications cannot be sent, are deleted upon receiving error response from FCM default: False
}


# Deal with CORS issues on frontendf
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5000",
    "http://127.0.0.1:5000",
]

FRONTEND_URL = os.environ.get('FRONTEND_URL', '')
if FRONTEND_URL and FRONTEND_URL not in CORS_ALLOWED_ORIGINS:
    CORS_ALLOWED_ORIGINS.append(FRONTEND_URL)


# Function that handles precomputation
PRECOMPUTATION_FUNCTION = "ldms.utils.precomputation_util.run_computations"
DEFAULT_CRS = "EPSG:4326"
DELETE_TEMP_FILES_AFTER=86400 #Time in seconds after which temp .tif files will be deleted
